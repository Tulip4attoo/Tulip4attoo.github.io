/**
 * Syntax highlighting styles
 */
.highlight {
    background: var(--syntax-bg);
    color: var(--syntax-text); /* Default text color for code */

    pre {
        overflow-x: auto;       // this sets the scrolling in x
        white-space: pre;       // forces <code> to respect <pre> formatting
        code {
            white-space: pre;       // forces <code> to respect <pre> formatting
        }
    }

    .c     { color: var(--syntax-comment); font-style: italic } // Comment
    .err   { color: var(--syntax-error-text); background-color: var(--syntax-error-bg) } // Error
    .k     { font-weight: bold; color: var(--syntax-keyword)} // Keyword
    .o     { font-weight: bold; color: var(--syntax-operator) } // Operator - Added color
    .cm    { color: var(--syntax-comment-ml); font-style: italic } // Comment.Multiline
    .cp    { color: var(--syntax-comment-preproc); font-weight: bold } // Comment.Preproc
    .c1    { color: var(--syntax-comment-single); font-style: italic } // Comment.Single
    .cs    { color: var(--syntax-comment-special); font-weight: bold; font-style: italic } // Comment.Special
    .gd    { color: var(--syntax-generic-deleted-text); background-color: var(--syntax-generic-deleted-bg) } // Generic.Deleted
    .gd .x { color: var(--syntax-generic-deleted-text); background-color: var(--syntax-generic-deleted-bg) } // Generic.Deleted.Specific - Using same vars for simplicity
    .ge    { font-style: italic } // Generic.Emph
    .gr    { color: var(--syntax-generic-error) } // Generic.Error
    .gh    { color: var(--syntax-generic-heading) } // Generic.Heading
    .gi    { color: var(--syntax-generic-inserted-text); background-color: var(--syntax-generic-inserted-bg) } // Generic.Inserted
    .gi .x { color: var(--syntax-generic-inserted-text); background-color: var(--syntax-generic-inserted-bg) } // Generic.Inserted.Specific - Using same vars
    .go    { color: var(--syntax-generic-output) } // Generic.Output
    .gp    { color: var(--syntax-generic-prompt) } // Generic.Prompt
    .gs    { font-weight: bold } // Generic.Strong
    .gu    { color: var(--syntax-generic-subheading) } // Generic.Subheading
    .gt    { color: var(--syntax-generic-traceback) } // Generic.Traceback
    .kc    { font-weight: bold; color: var(--syntax-keyword) } // Keyword.Constant - Added color
    .kd    { font-weight: bold; color: var(--syntax-keyword) } // Keyword.Declaration - Added color
    .kp    { font-weight: bold; color: var(--syntax-keyword) } // Keyword.Pseudo - Added color
    .kr    { font-weight: bold; color: var(--syntax-keyword) } // Keyword.Reserved - Added color
    .kt    { color: var(--syntax-keyword-type); font-weight: bold } // Keyword.Type
    .m     { color: var(--syntax-literal-number) } // Literal.Number
    .s     { color: var(--syntax-literal-string) } // Literal.String
    .na    { color: var(--syntax-name-attribute) } // Name.Attribute
    .nb    { color: var(--syntax-name-builtin) } // Name.Builtin
    .nc    { color: var(--syntax-name-class); font-weight: bold } // Name.Class
    .no    { color: var(--syntax-name-constant) } // Name.Constant
    .ni    { color: var(--syntax-name-entity) } // Name.Entity
    .ne    { color: var(--syntax-name-exception); font-weight: bold } // Name.Exception
    .nf    { color: var(--syntax-name-function); font-weight: bold } // Name.Function
    .nn    { color: var(--syntax-name-namespace) } // Name.Namespace
    .nt    { color: var(--syntax-name-tag) } // Name.Tag
    .nv    { color: var(--syntax-name-variable) } // Name.Variable
    .ow    { font-weight: bold; color: var(--syntax-operator) } // Operator.Word - Added color
    .w     { color: var(--syntax-text-whitespace) } // Text.Whitespace
    .mf    { color: var(--syntax-literal-number) } // Literal.Number.Float
    .mh    { color: var(--syntax-literal-number) } // Literal.Number.Hex
    .mi    { color: var(--syntax-literal-number) } // Literal.Number.Integer
    .mo    { color: var(--syntax-literal-number) } // Literal.Number.Oct
    .sb    { color: var(--syntax-literal-string) } // Literal.String.Backtick
    .sc    { color: var(--syntax-literal-string) } // Literal.String.Char
    .sd    { color: var(--syntax-literal-string) } // Literal.String.Doc
    .s2    { color: var(--syntax-literal-string) } // Literal.String.Double
    .se    { color: var(--syntax-literal-string) } // Literal.String.Escape
    .sh    { color: var(--syntax-literal-string) } // Literal.String.Heredoc
    .si    { color: var(--syntax-literal-string) } // Literal.String.Interpol
    .sx    { color: var(--syntax-literal-string) } // Literal.String.Other
    .sr    { color: var(--syntax-literal-string-regex) } // Literal.String.Regex
    .s1    { color: var(--syntax-literal-string) } // Literal.String.Single
    .ss    { color: var(--syntax-literal-string-symbol) } // Literal.String.Symbol
    .bp    { color: var(--syntax-name-builtin-pseudo) } // Name.Builtin.Pseudo
    .vc    { color: var(--syntax-name-variable) } // Name.Variable.Class - Using general variable color
    .vg    { color: var(--syntax-name-variable) } // Name.Variable.Global - Using general variable color
    .vi    { color: var(--syntax-name-variable) } // Name.Variable.Instance - Using general variable color
    .il    { color: var(--syntax-literal-number) } // Literal.Number.Integer.Long
}
